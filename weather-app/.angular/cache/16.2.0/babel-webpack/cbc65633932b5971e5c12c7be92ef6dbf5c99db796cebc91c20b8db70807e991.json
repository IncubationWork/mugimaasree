{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction WeatherComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"h2\");\n    i0.ɵɵtext(14, \"Weather Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"p\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"p\");\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\");\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.weatherData.results[0].name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"latitude: \", ctx_r0.weatherData.results[0].latitude, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Country: \", ctx_r0.weatherData.results[0].country, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Longitude: \", ctx_r0.weatherData.results[0].longitude, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Timezone: \", ctx_r0.weatherData.results[0].timezone, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Population: \", ctx_r0.weatherData.results[0].population, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", ctx_r0.weatherData.current_weather.temperature, \"\\u00B0C\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", ctx_r0.weatherData.hourly.relativehumidity_2m[0], \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Wind Speed: \", ctx_r0.weatherData.current_weather.windspeed, \" m/s\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Weather Code: \", ctx_r0.weatherData.current_weather.weathercode, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Weather Description: \", ctx_r0.getWeatherDescription(ctx_r0.weatherData.current_weather.weathercode), \"\");\n  }\n}\nexport class WeatherComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.name = '';\n  }\n  getWeather() {\n    this.weatherService.getWeather(this.name).subscribe(data => {\n      this.weatherData = data;\n      this.getTemperature(this.weatherData.results[0].latitude, this.weatherData.results[0].longitude);\n    });\n  }\n  getTemperature(latitude, longitude) {\n    this.weatherService.getTemperature(latitude, longitude).subscribe(data => {\n      this.weatherData.current_weather = data.current_weather;\n    });\n  }\n}\n_class = WeatherComponent;\n_class.ɵfac = function WeatherComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-weather\"]],\n  decls: 8,\n  vars: 2,\n  consts: [[\"type\", \"text\", \"name\", \"cityName\", \"placeholder\", \"Enter a city name\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"click\"], [4, \"ngIf\"]],\n  template: function WeatherComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n      i0.ɵɵtext(2, \"Weather Application\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\")(4, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function WeatherComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.name = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function WeatherComponent_Template_button_click_5_listener() {\n        return ctx.getWeather();\n      });\n      i0.ɵɵtext(6, \"Get Weather\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(7, WeatherComponent_div_7_Template, 25, 11, \"div\", 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.name);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.weatherData.current_weather);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","weatherData","results","name","ɵɵtextInterpolate1","latitude","country","longitude","timezone","population","current_weather","temperature","hourly","relativehumidity_2m","windspeed","weathercode","getWeatherDescription","WeatherComponent","constructor","weatherService","getWeather","subscribe","data","getTemperature","ɵɵdirectiveInject","i1","WeatherService","selectors","decls","vars","consts","template","WeatherComponent_Template","rf","ctx","ɵɵlistener","WeatherComponent_Template_input_ngModelChange_4_listener","$event","WeatherComponent_Template_button_click_5_listener","ɵɵtemplate","WeatherComponent_div_7_Template","ɵɵproperty"],"sources":["/home/inc3598/Documents/MyWork/angular/weather-app/src/app/weather/weather.component.ts","/home/inc3598/Documents/MyWork/angular/weather-app/src/app/weather/weather.component.html"],"sourcesContent":["/* import { Component } from '@angular/core';\nimport { WeatherService } from '../weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent {\n  city!: string;\n  weatherData: any;\n\n  constructor(private weatherService: WeatherService) {}\n\n  getWeather() {\n    this.weatherService.getWeather(this.city)\n    .subscribe(data=>{\n      this.weatherData=data;\n      console.log(data);\n    }); \n  }\n}\n */\n\nimport { Component } from '@angular/core';\nimport { WeatherService } from '../weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent {\n\n  name: string = '';\n  weatherData: any;\n\n  constructor(private weatherService: WeatherService) {}\n\n  getWeather() {\n    this.weatherService.getWeather(this.name)\n      .subscribe(data => {\n        this.weatherData = data;\n        this.getTemperature(this.weatherData.results[0].latitude, this.weatherData.results[0].longitude);\n      });\n  }\n\n  getTemperature(latitude: number, longitude: number) {\n    this.weatherService.getTemperature(latitude, longitude)\n      .subscribe(data => {\n        this.weatherData.current_weather = data.current_weather;\n      });\n  }\n\n  \n}\n","<!-- <div>\n    <h1>Weather Application</h1>\n    <form>\n      <input type=\"text\" name=\"cityName\" placeholder=\"Enter a city name\" [(ngModel)]=\"city\">\n      <button type=\"button\" (click)=\"getWeather()\">Get Weather</button>\n    </form>\n    <div *ngIf=\"weatherData\">\n      <h2>{{ weatherData.name }}</h2>\n      <p>Temperature: {{ weatherData.main.temp }}°C</p>\n      <p>Humidity: {{ weatherData.main.humidity }}%</p>\n      <p>Weather: {{ weatherData.weather[0].description }}</p>\n    </div>\n  </div>\n   -->\n   <!-- <div>\n    <h1>Weather Application</h1>\n    <form>\n      <label for=\"latitude\">Latitude:</label>\n      <input type=\"number\" id=\"latitude\" [(ngModel)]=\"latitude\" name=\"city\">\n      <label for=\"longitude\">Longitude:</label>\n      <input type=\"number\" id=\"longitude\" [(ngModel)]=\"longitude\" name=\"city2\">\n      <button type=\"button\" (click)=\"getTemperature()\">Get Temperature</button>\n    </form>\n    <div *ngIf=\"weatherData\">\n      <h2>latitude:{{weatherData.latitude}}</h2>\n      <p>Temperature:{{weatherData.current_weather.temperature}}°C</p>\n      <p>Humidity:{{weatherData.hourly.relativehumidity_2m[0]}}m</p>\n      <p>windspeed:{{weatherData.current_weather.windspeed}}m</p>\n      <p>weathercode:{{weatherData.current_weather.weathercode}}m</p>\n      <p>Weather Description: {{ getWeatherDescription(weatherData.current_weather.weathercode) }}</p>\n      <h2>Elevation:{{weatherData.elevation}}</h2>\n      \n\n    </div>\n  </div> -->\n\n  <div>\n    <h1>Weather Application</h1>\n    <form>\n      <input type=\"text\" name=\"cityName\" placeholder=\"Enter a city name\" [(ngModel)]=\"name\">\n      <button type=\"button\" (click)=\"getWeather()\">Get Weather</button>\n    </form>\n    <div *ngIf=\"weatherData.current_weather\">\n      <h2>{{ weatherData.results[0].name }}</h2>\n      <p>latitude: {{ weatherData.results[0].latitude }}</p>\n      <p>Country: {{ weatherData.results[0].country }}</p>\n      <p>Longitude: {{ weatherData.results[0].longitude }}</p>\n      <p>Timezone: {{ weatherData.results[0].timezone }}</p>\n      <p>Population: {{ weatherData.results[0].population }}</p>\n      <h2>Weather Details</h2>\n      <p>Temperature: {{ weatherData.current_weather.temperature }}°C</p>\n      <p>Humidity: {{ weatherData.hourly.relativehumidity_2m[0] }}%</p>\n      <p>Wind Speed: {{ weatherData.current_weather.windspeed }} m/s</p>\n      <p>Weather Code: {{ weatherData.current_weather.weathercode }}</p>\n      <p>Weather Description: {{ getWeatherDescription(weatherData.current_weather.weathercode) }}</p>\n    </div>\n  </div>\n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}