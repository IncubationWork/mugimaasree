{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n  }\n  getGeocodingData(name) {\n    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${name}&count=10&language=en&format=json`;\n    console.log('Geocoding API URL:', url);\n    return this.http.get(url);\n  }\n  getWeatherData(latitude, longitude) {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,wind_speed_10m`;\n    console.log('Weather API URL:', url);\n    return this.http.get(url);\n  }\n}\n_class = WeatherService;\n_class.ɵfac = function WeatherService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["WeatherService","constructor","http","getGeocodingData","name","url","console","log","get","getWeatherData","latitude","longitude","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/inc3598/Documents/MyWork/angular/weather-app/src/app/weather.service.ts"],"sourcesContent":["/* /* import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  apiKey='8d02d19617099d749aa81c0d7f246550';\n  constructor(private http:HttpClient) { }\n\n  getWeather(city: string) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.apiKey}`;\n    console.log('API URL:', url);\n    return this.http.get(url);\n  }\n  \n}\n */\n\n/* import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private http: HttpClient) { }\n\n  getTemperature(latitude: number, longitude: number) {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m`;\n    return this.http.get(url);\n  }\n} \n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(name: string) {\n    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${name}&count=10&language=en&format=json`;\n    console.log('API URL:', url);\n    return this.http.get(url);\n  }\n\n  getTemperature(latitude: number, longitude: number) {\n    const url1 = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m`;\n    return this.http.get(url1);\n  }\n}\n\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private http: HttpClient) { }\n\n  getGeocodingData(name: string): Observable<any> {\n    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${name}&count=10&language=en&format=json`;\n    console.log('Geocoding API URL:', url);\n    return this.http.get(url);\n  }\n\n  getWeatherData(latitude: number, longitude: number): Observable<any> {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,wind_speed_10m`;\n    console.log('Weather API URL:', url);\n    return this.http.get(url);\n  }\n}\n\n"],"mappings":";;;AAoEA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,gBAAgBA,CAACC,IAAY;IAC3B,MAAMC,GAAG,GAAG,uDAAuDD,IAAI,mCAAmC;IAC1GE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,GAAG,CAAC;IACtC,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAACH,GAAG,CAAC;EAC3B;EAEAI,cAAcA,CAACC,QAAgB,EAAEC,SAAiB;IAChD,MAAMN,GAAG,GAAG,mDAAmDK,QAAQ,cAAcC,SAAS,uCAAuC;IACrIL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACpC,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAACH,GAAG,CAAC;EAC3B;;SAdWL,cAAc;;mBAAdA,MAAc,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdf,MAAc;EAAAgB,OAAA,EAAdhB,MAAc,CAAAiB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}